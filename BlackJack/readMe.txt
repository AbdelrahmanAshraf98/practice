readMe.txt (Programming Project #4)Jackie Luo (jhl2182)Game.java, Deck.java, Dealer.java, and Player.javaTo use this program, run BlackJack. The aim of the game is for the player to have a hand total that’s closest to (less than or equal to) the number 21 without going over it. If your hand total is below 21, you will be asked to either hit (draw another card) or stand. Once you’ve finished hitting and decide to stand, the dealer will either hit or stand. Once it stands, the results of the hand will be determined and shown.First, in writing Game.java, I created a constructor to initialize the instance instances of classes Deck, Player, and Dealer so that I could call methods from them later. Then, the play() method opens the game with a welcome message and calls the method playHand(). In playHand(), the deck is shuffled, and two cards are drawn for the player and added to her hand. The cards in the hand are printed so that the player can see. Two cards for the dealer are drawn, and the first is shown to the player as well. Then, askPlayer() is called so that the player can choose to hit or stand (as long as her hand total is below 21). If the player inputs “hit,” a card is drawn from the deck and added to the hand with methods from classes Deck and Player. The full hand is printed for the player to see, and then the askPlayer() method is called again. If the player chooses to stand, then her hand total is printed and we return to running through playHand(), where playDealer() is called. In playDealer(), the choice is simple. While the dealer’s hand total is equal to or less than 16, it hits (drawing another card), and if it is 17 or greater, it stands. After that, playHand() calls getResult(), which prints the conclusion of the hand. If the player’s hand total is under 21 and greater than the dealer’s total, she wins. If the player’s hand total is under 21 and the dealer’s is above 21, she wins, and the dealer goes bust. If both the player and the dealer have the same hand totals below 21, they tie. If the dealer has a hand total below 21 that is greater than the player’s total, it wins. Finally, in other cases (when the player’s hand total is above 21), she goes bust and the dealer wins.In Deck.java, the constructor initializes the array cards and assigns all of the combinations for values (1 through 13) and suits (clubs, diamonds, hearts, and spades) for 52 cards. It also initializes the instance variables cardsDrawn and top at zero. In draw(), the method simply returns myCard, the top card in the deck, and then moves to the next card in the array by incrementing which card is top. It also increments each time to keep track of how many cards have been drawn. In shuffle(), I used the Fisher-Yates algorithm to randomize the order of the cards in the array. After each shuffle, it also resets cardsDrawn to zero. The method getCardsDrawn() just returns the int cardsDrawn, and the method toString() returns a full string of the cards in the deck in order from top to bottom.In Dealer.java, the constructor initializes the ArrayList hand for the dealer and the instance variable handTotal as zero. The aim of the class is to add cards to the dealer’s hand and show cards from the hand. The method getTotal() was a part of the template meant to return an int handTotal (the total value of the dealer’s hand). The method addCard(Card myCard) added myCard from the Card class to the dealer’s hand, adding 10 for each face card, either 1 or 11 for aces (depending on which brings the total closest to 21 without going bust), or just the given value of numbered cards. Finally, the last two methods returned cards from the dealer’s hand—the method showCard() showed just one card from the dealer’s hand, the first one drawn, so that the player knew the value of the card, and the method showHand() showed the full hand of the dealer, and it was called in the Game class at the end of a hand to show the player which cards the dealer was holding.Finally, in Player.java, the class was designed in a similar manner to Dealer.java in the sense that it handled the player’s cards, adding cards and showing the player which cards she had drawn. The constructor initializes the Arraylist hand for the player and the instance variable handTotal to zero. The method getTotal() also returns handTotal, except for the player’s hand total rather than the dealer’s. The method addCard(Card myCard) added myCard drawn in the Card class to the player’s hand, with the same rules (10 for each face card, either 1 or 11 for aces, and the given value for numbered cards). The last method of the class, showHand(), has the same function as showHand() in the Dealer class, and it is called in Game to ensure that the player always knows which cards she is holding.